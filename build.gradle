buildscript {
    repositories {
        jcenter()/*
        maven { // The repo from which to get waila
            name "Mobius Repo"
            url "http://mobiusstrip.eu/maven"
        }
        maven {
            name = "codechicken"
            url = "http://chickenbones.net/maven"
        }*/
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

apply plugin: 'forge'

def buildnumber = System.getenv("BUILD_NUMBER") == null ? null : System.getenv("BUILD_NUMBER")

version = minecraft_version + "-" +  mod_version + ( buildnumber == null ? "" : "." + buildnumber + "-SANPSHOT")

group = mod_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = minecraft_version + "-" + forge_version
    runDir = "eclipse"
}
ext.jarFile = zipTree(jar.archivePath)
/*task apiJar(type: Jar, dependsOn: jar) {
    classifier = 'api'
    doFirst {
        from(project.ext.jarFile) {
            includes.addAll(["unstudio/api/**", "unstudio/chinacraft/api/**"])
        }
    }
}

artifacts {
    archives apiJar
}*/

repositories {
    jcenter()
    /*
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name = "codechicken"
        url = "http://chickenbones.net/maven"
    }
*/
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    mavenCentral()
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    compile fileTree(dir: 'libs', include: '*.jar') // Libs Folder
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // NotEnoughItems
    // compile "codechicken:CodeChickenLib:${minecraft_version}-${code_chicken_lib_version}:dev"
    // compile "codechicken:CodeChickenCore:${minecraft_version}-${code_chicken_core_version}:dev"
    // compile "codechicken:NotEnoughItems:${minecraft_version}-${nei_version}:dev"

    // ompile "mcp.mobius.waila:Waila:${waila_version}_${minecraft_version}"
    // Vault
    // compile "net.milkbowl.vault:VaultAPI:${vault_version}"

    // Bukkit
    // compile "org.bukkit:bukkit:${minecraft_version}-${bukkit_version}"
    // compile files('libs/spigot-api-1.8.7-R0.1-SNAPSHOT.jar')

    // compile files('libs/VersionChecker-1.1.9.jar')


}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}
